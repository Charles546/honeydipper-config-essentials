---
drivers:
  daemon:
    features:
      global:
        - name: "driver:gcloud-kms"
          required: true
      operator:
        - name: "driver:gcloud-gke"
        - name: "driver:gcloud-dataflow"
    drivers:
      # Driver: Gcloud.Drivers.gcloud-gke
      #
      #   Accessing the gcloud gke clusters
      #
      #   Prereq:
      #     * include the gcloud bundle from this repo
      #
      #   Integration:
      #     Config the driver in the `drivers` section with following parameters.
      #
      #     * loglevel: the verbosity of logs generated by this driver, DEBUG, INFO, WARNING, ERROR
      #
      #   Example:
      #     +---------------------------
      #     | ---
      #     | drivers:
      #     |   web:
      #     |     loglevel: DEBUG
      #     +---------------------------
      #
      gcloud-gke:
        name: gcloud-gke
        data:
          Type: go
          Package: github.com/honeydipper/honeydipper/drivers/cmd/gcloud-gke
          # RPC: getKubeConfig
          #
          # This RPC is used internally by kubernetes driver to fetch cluster endpoint and auth info.
          #
          # Parameters:
          #   * project -- which GCP project the cluster is in
          #   * service_account -- the service account in json file format
          #   * location -- either region or zone
          #   * reginal -- true if the cluster is reginal, otherwise zonal, defaults to false
          #   * cluster -- name of the cluster
          #
          # Use:
          #
          # When calling kubenetes functions, put the parameters mentioned here in the `parameters.source`.
          # These can usually be put into the system data, so they can be reused in function calls and workflows.

      # Driver: Gcloud.Drivers.gcloud-kms
      #
      # Decrypting config data using GCP KMS
      #
      # Prereq:
      #   * include the gcloud bundle from this repo
      #   * Honeydipper must be running inside GCP with a service account with roles/cloudkms.cryptoKeyDecrypter
      #
      # Integration:
      #   Config the driver in the `drivers` section with following parameters.
      #
      #   * loglevel: the verbosity of logs generated by this driver, DEBUG, INFO, WARNING, ERROR
      #   * keyname: the keyname in KMS, projects/<project name>/locations/<location>/keyRings/<key ring name>/cryptoKeys/<key name>
      #
      # Example:
      #   +---------------------------
      #   | ---
      #   | drivers:
      #   |   gloud-kms:
      #   |     loglevel: DEBUG
      #   |     keyname: projects/example/locations/us-west1-b/keyRings/example-ring/cryptoKeys/example-key
      #   +---------------------------
      #
      # Usage:
      #
      # Honeydipper supports eyaml format of encrypted content, just specify the the ciphertext and driver name in `ENC[...]`.
      #
      #   +---------------------------
      #   | ---
      #   | systems:
      #   |   example-system:
      #   |     secret: ENC[gcloud-kms,<... base64 encoded ciphertext ...>]
      #   |     ...
      #   +---------------------------
      #
      gcloud-kms:
        name: gcloud-kms
        data:
          Type: go
          Package: github.com/honeydipper/honeydipper/drivers/cmd/gcloud-kms
          # RPC: decrypt
          #
          # This RPC is used internally by Honeydipper and other drivers to decrypt content.
          #
          # Parameters:
          #   * the whole dipper.Message raw payload is the ciphertext in `byte[]`
          #

      # Driver: Gcloud.Drivers.gcloud-dataflow
      #
      # Creating and managing dataflow job
      #
      # Prereq:
      #   * include the gcloud bundle from this repo
      #
      # Integration:
      #   Config the driver in the `drivers` section with following parameters.
      #
      #   * loglevel: the verbosity of logs generated by this driver, DEBUG, INFO, WARNING, ERROR
      #
      # Example:
      #   +---------------------------
      #   | ---
      #   | drivers:
      #   |   gloud-dataflow:
      #   |     loglevel: DEBUG
      #   +---------------------------
      #
      gcloud-dataflow:
        name: gcloud-dataflow
        data:
          Type: go
          Package: github.com/honeydipper/honeydipper/drivers/cmd/gcloud-dataflow
          # RawAction: createJob
          #
          # create dataflow job with a template.
          #
          # Parameters:
          #   service_account - the service account used for accessing gcloud to create the job
          #   project - the GCP project
          #   location - required for location based dataflow job
          #   regional - set to true for regional dataflow job, ignoring location, defaults to false
          #   job - the specification for the job, see https://godoc.org/google.golang.org/api/dataflow/v1b3#CreateJobFromTemplateRequest for detail
          #
          # Return:
          #   .data.job - the job object, see https://godoc.org/google.golang.org/api/dataflow/v1b3#Job for detail
          #
          # Examples:
          # Create a new job with teamplate.
          #   +-------------------------
          #   | rules:
          #   |   - when:
          #   |       ...
          #   |   - do:
          #   |       type: function
          #   |       content:
          #   |         driver: gcloud-dataflow
          #   |         rawAction: createJob
          #   |         parameters:
          #   |           service_account: xxxxxxx
          #   |           project: example-project
          #   |           location: us-west1-c
          #   |           job:
          #   |             ...
          #   |
          #   +-------------------------

          # RawAction: waitForJob
          #
          # wait for the dataflow job to reach terminal states and return a job status.
          #
          #   +-------------------------
          #   | terminatedStates := map[string]bool{
          #   |   "JOB_STATE_DONE":      true,
          #   |   "JOB_STATE_FAILED":    true,
          #   |   "JOB_STATE_CANCELLED": true,
          #   |   "JOB_STATE_UPDATED":   true,
          #   |   "JOB_STATE_DRAINED":   true,
          #   | }
          #   +-------------------------
          #
          # Parameters:
          #   service_account - the service account used for accessing gcloud to create the job
          #   project - the GCP project
          #   location - required for location based dataflow job
          #   regional - set to true for regional dataflow job, ignoring location, defaults to false
          #   jobID - the ID of the job
          #   timeout - time period before a timeout error is raised
          #   interval - the interval between API calls polling the job status
          #
          # Return:
          #   .data.job -- the job object, see https://godoc.org/google.golang.org/api/dataflow/v1b3#Job for detail
          #
          # Examples:
          # Wait for a job to complete.
          #   +-------------------------
          #   | rules:
          #   |   - when:
          #   |       ...
          #   |   - do:
          #   |       type: function
          #   |       content:
          #   |         driver: gcloud-dataflow
          #   |         rawAction: waitForJob
          #   |         parameters:
          #   |           service_account: xxxxxxx
          #   |           project: example-project
          #   |           location: us-west1-c
          #   |           jobID: ...
          #   |           timeout: 1800
          #   |           interval: 10
          #   |
          #   +-------------------------

          # RawAction: getJob
          #
          # query the job info and status with a jobID
          #
          # Parameters:
          #   service_account - the service account used for accessing gcloud to create the job
          #   project - the GCP project
          #   location - required for location based dataflow job
          #   regional - set to true for regional dataflow job, ignoring location, defaults to false
          #   jobID - the ID of the job
          #
          # Return:
          #   .data.job -- the job object, see https://godoc.org/google.golang.org/api/dataflow/v1b3#Job for detail
          #
          # Examples:
          # === Code
          # workflows:
          #   check-dataflow-job-status:
          #     type: pipe
          #     content:
          #       - type: function
          #         content:
          #           driver: gcloud-dataflow
          #           rawAction: getJob
          #           parameters:
          #             service_account: xxxxxxx
          #             project: example-project
          #             location: us-west1-c
          #             jobID: {{ .wfdata.jobID }}
          #       - content: notify
          #         data:
          #           message:
          #             attachments:
          #               - color: '{{ ternary "good" "danger" (eq .data.job.currentState "JOB_STATE_DONE") }}'
          #                 text: Job state is {{ .data.job.currentState }}
          # ===
          #

          # RawAction: listJob
          #
          # query a list of jobs with given filter and fields list.
          #
          # Parameters:
          #   service_account - the service account used for accessing gcloud to create the job
          #   project - the GCP project
          #   location - required for location based dataflow job
          #   fields - the list of fields to query
          #   filter - the filter, see https://godoc.org/google.golang.org/api/dataflow/v1b3#ProjectsJobsListCall.Filter
          #
          # Return:
          #   .data.result - see https://godoc.org/google.golang.org/api/dataflow/v1b3#ListJobsResponse for detail
          #

  gcloud-kms:
    keyname: _place_holder_
