---
# System: Essentials.Systems.opsgenie
#
# Purpose:
#   Integrate with OpsGenie to receive new alert events through webhook.
#   If provided with a API key, can make alert API calls to OpsGenie to perform actions such as suspending alerts, closing alerts, etc.
#
# Config:
#   API_KEY - key used to make API calls to OpsGenie
#   token - a token randomly generated for authenticate webhook requests coming from OpsGenie. It should match the url parameter "token"
#   path - the path part of the uri where the <Essentials.Drivers.webhook> is listening, defaults to /opsgenie
#
# Synopsis:
#   Below is an example config for the system
#     +----------------------------------------------------------------------+
#     | ---
#     | systems:
#     |   opsgenie:
#     |     data:
#     |       API_KEY: ENC[<decryption_driver>,<base64 encoded ciphertext>]
#     |       token: ENC[<decryption_driver>,<base64 encoded ciphertext>]
#     |       path: "/alerting"
#     |
#     +----------------------------------------------------------------------+
#
#   You can also extend this system.
#     +----------------------------------------------------------------------+
#     | ---
#     | systems:
#     |   alerting:
#     |     extends:
#     |       - opsgenie
#     |     data:
#     |       API_KEY: ENC[<decryption_driver>,<base64 encoded ciphertext>]
#     |       token: ENC[<decryption_driver>,<base64 encoded ciphertext>]
#     |       path: "/alerting"
#     |
#     +----------------------------------------------------------------------+
#
# Notes:
#   Use encryption for your API_KEY and token value for security
systems:
  opsgenie:
    data:
      API_KEY: _place_holder_
      token: _place_holder_
      path: "/opsgenie"
    functions:
      # Action: snooze
      #   snooze an alert with the given alertId, by default the alertId is taken from
      #     the triggering event ".event.json.alert.alertId". To override, specify the path to the
      #     alertId in "alertIdPath" parameter
      #
      #   Examples:
      #     Below is an example that snooze an alert from OpsGenie.
      #       +----------------------------------------------------------------------+
      #       | ---
      #       | rules:
      #       |   - when:
      #       |       source:
      #       |         system: opsgenie
      #       |         trigger: alert
      #       |   - do:
      #       |       type: if
      #       |       condition: '{{ eq .event.json.alert.message "test alert" }}'
      #       |       content:
      #       |         - type: function
      #       |           content:
      #       |             target:
      #       |               system: opsgenie
      #       |               function: snooze
      #       |
      #       +----------------------------------------------------------------------+
      snooze:
        driver: web
        rawAction: request
        parameters:
          URL: https://api.opsgenie.com/v2/alerts/{{ fromPath . .params.alertIdPath }}/snooze
          header:
            Content-Type: application/json
            Authorization: GenieKey {{ .sysData.API_KEY }}
          method: POST
          content:
            endTime: '{{ now.UTC.Add ( duration "+20m" ) | ISO8601 }}'
            user: honeydipper
            source: honeydipper
            notes: snoozed due to honeydipper automation
          ## path of needed info in the kv data structure
          alertIdPath: "event.json.alert.alertId"
      # Action: heartbeat
      #
      # Sending a heartbeat ping to OpsGenie
      #
      # Parameters:
      #
      # .wfdata.heartbeat - required, the name of the heartbeat configured in OpsGenie
      #
      # Examples:
      #
      # Below is an example that snooze an alert from OpsGenie.
      #   +----------------------------------------------------------------------+
      #   | ---
      #   | rules:
      #   |   - when:
      #   |       ...
      #   |   - do:
      #   |       type: function
      #   |       data:
      #   |          heartbeat: my_system_heartbeat
      #   |       content:
      #   |         target:
      #   |           system: opsgenie
      #   |           function: heartbeat
      #   |
      #   +----------------------------------------------------------------------+
      heartbeat:
        driver: web
        rawAction: request
        parameters:
          URL: https://api.opsgenie.com/v2/heartbeats/{{ .wfdata.heartbeat }}/ping
          method: GET
          header:
            Authorization: GenieKey {{ .sysData.API_KEY }}
    triggers:
      # Trigger: alert
      #   raised when receive a webhook from OpsGenie, the payload will be in .event.json. See Opsgenie
      #   Document for detail on what is available in the payload.
      #
      alert:
        driver: webhook
        conditions:
          method: POST
          form:
            token: '{{ .sysData.token }}'
          url: '/opsgenie'
