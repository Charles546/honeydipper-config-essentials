---
# Driver: Essentials.Drivers.kubernetes
#
#   interacting with kubernetes objects using kubernetes API
#
#   Prereq:
#     * include the basic bundle from this repo
#
#   Integration:
#     Config the driver in the `drivers` section with following parameters.
#
#     * loglevel: the verbosity of logs generated by this driver, DEBUG, INFO, WARNING, ERROR
#
#   Example:
#     +---------------------------
#     | ---
#     | drivers:
#     |   kubernetes:
#     |     loglevel: DEBUG
#     +---------------------------
#
drivers:
  daemon:
    drivers:
      kubernetes:
        name: kubernetes
        data:
          Type: go
          Package: github.com/honeydipper/honeydipper/drivers/cmd/kubernetes
    features:
      operator:
        - name: "driver:kubernetes"

# RawAction: recycleDeployment
#
#   Recycle a deployment by delete its replicaset. Thanks to the deployment manager, the new replicaset
#   will be created before the old one is destroyed.
#
#   Parameters:
#
#     * deployment: a label selector for the deployment (required)
#     * namespace: the namespace where the deployment is in, defaults to "default"
#     * source: the cluster information
#       * type: which driver provides the cluster information, (gcloud-gke, local, etc.)
#       * ... needed for the making a RPC call to the driver to fetch cluster endpoint and auth info.
#
#   Return:
#
#     Use ".label.status" in `interpolation` to check status, "success" or "failure".
#
#   Example:
#     +---------------------------
#     | ---
#     | rules:
#     |   - when:
#     |       ...
#     |     do:
#     |       type: function
#     |       content:
#     |         driver: kubernetes
#     |         rawAction: recycleDeployment
#     |         parameters:
#     |           source:
#     |             type: gcloud-gke
#     |             service_account: xxxxx...
#     |             project: example
#     |             location: us-west1-b
#     |             cluster: example
#     |           namespace: mynamespace
#     |           deployment: run=busybox
#     +---------------------------

# RawAction: createJob
#
#   Create a run to completion job in the specified kubernetes cluster.
#
#   Parameters:
#
#     * job: the complete kubernetes manifest for a `job` object
#     * namespace: the namespace where the job will be created, defaults to "default"
#     * source: the cluster information
#       * type: which driver provides the cluster information, (gcloud-gke, local, etc.)
#       * ... needed for the making a RPC call to the driver to fetch cluster endpoint and auth info.
#
#   Return:
#
#     Use ".label.status" in `interpolation` to check status, "success" or "failure".
#
#     * .label.status:  "success" or "failure"
#     * .data.meta:  the metadata including the generated name of the job
#     * .data.status:  the status of the job
#
#   Example:
#     +---------------------------
#     | ---
#     | rules:
#     |   - when:
#     |       ...
#     |     do:
#     |       type: function
#     |       content:
#     |         driver: kubernetes
#     |         rawAction: createJob
#     |         parameters:
#     |           source:
#     |             type: local
#     |           namespace: mynamespace
#     |           job:
#     |             kind: job
#     |             apiVersion: ...
#     |             ...
#     +---------------------------

# RawAction: waitForJob
#
#   Wait for a job to complete/terminate
#
#   Parameters:
#
#     * job: the metadata.name of the job
#     * timeout: the number of seconds to wait for job to complete/terminate
#     * namespace: the namespace where the job will be created, defaults to "default"
#     * source: the cluster information
#       * type: which driver provides the cluster information, (gcloud-gke, local, etc.)
#       * ... needed for the making a RPC call to the driver to fetch cluster endpoint and auth info.
#
#   Return:
#
#   If the job doesn't complete/terminate within the time period, you will get a timeout error.
#
#     * .label.status:  "success" or "failure"
#     * .label.reason:  "time out" etc.
#     * .data.status:  the status of the job
#
#   Example:
#     +---------------------------
#     | ---
#     | rules:
#     |   - when:
#     |       ...
#     |     do:
#     |       type: function
#     |       content:
#     |         driver: kubernetes
#     |         rawAction: waitForJob
#     |         parameters:
#     |           source:
#     |             type: local
#     |           namespace: mynamespace
#     |           job: myjob
#     +---------------------------

# RawAction: getJobLog
#
#   get the container logs from the kubernetes job object.
#
#   Parameters:
#
#     * job: the metadata.name of the job
#     * namespace: the namespace where the job will be created, defaults to "default"
#     * source: the cluster information
#       * type: which driver provides the cluster information, (gcloud-gke, local, etc.)
#       * ... needed for the making a RPC call to the driver to fetch cluster endpoint and auth info.
#
#   Return:
#
#     * .label.status:  "success" or "failure"
#     * .data.log:  map of pod name to map of container name to log text
#
#   Example:
#     +---------------------------
#     | ---
#     | rules:
#     |   - when:
#     |       ...
#     |     do:
#     |       type: function
#     |       content:
#     |         driver: kubernetes
#     |         rawAction: getJobLog
#     |         parameters:
#     |           source:
#     |             type: local
#     |           namespace: mynamespace
#     |           job: myjob
#     +---------------------------
